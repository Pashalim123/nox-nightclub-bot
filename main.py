# main.py
import os
import logging
import asyncio
from datetime import datetime
from io import BytesIO

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)
from PIL import Image, ImageDraw

# –í–∑—è—Ç—å –∏–∑ .env –≥—Ä—É–ø–ø—ã Render –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))  # –Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
(
    LANG,
    ASK_NAME,
    MENU,
    BOOK_DATE,
    BOOK_TIME,
    BOOK_COUNT,
    BOOK_CONFIRM,
    AI_ALLERGY,
    AI_MENU,
    MUSIC_TITLE,
    MUSIC_CONFIRM,
    FEEDBACK_CHOICE,
    FEEDBACK_TEXT,
) = range(13)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
log = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –®–∞–≥ 1: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    kb = [["–†—É—Å—Å–∫–∏–π"], ["English"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True)
    )
    return LANG


async def lang_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = update.message.text.lower()
    context.user_data["lang"] = "ru" if "—Ä—É—Å" in lang else "en"
    # –®–∞–≥ 2: –∏–º—è
    q = "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" if context.user_data["lang"] == "ru" else "How may I call you?"
    await update.message.reply_text(q, reply_markup=ReplyKeyboardMarkup([["‚Äî"]], one_time_keyboard=True))
    return ASK_NAME


async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    context.user_data["name"] = name
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    texts = {
        "ru": f"–ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "en": f"Hello, {name}! Choose section:",
    }
    kb = [
        ["üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", "ü™ë –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫"],
        ["ü§ñ AI-–º–µ–Ω—é", "üéµ –ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É"],
        ["‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
    ]
    await update.message.reply_text(texts[context.user_data["lang"]], reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
    return MENU


# 3.1 ‚Äî –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 3.1.1 ‚Äî –¥–∞—Ç–∞
    prompt = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):" if context.user_data["lang"] == "ru" else "Enter booking date (YYYY-MM-DD):"
    await update.message.reply_text(prompt)
    return BOOK_DATE


async def book_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["date"] = update.message.text.strip()
    prompt = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):" if context.user_data["lang"] == "ru" else "Enter time (HH:MM):"
    await update.message.reply_text(prompt)
    return BOOK_TIME


async def book_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["time"] = update.message.text.strip()
    prompt = "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?" if context.user_data["lang"] == "ru" else "How many guests?"
    await update.message.reply_text(prompt)
    return BOOK_COUNT


async def book_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["count"] = update.message.text.strip()
    # 3.1.2 ‚Äî —Å—Ö–µ–º–∞ –∑–∞–ª–∞
    img = draw_map(booked_seats=[])  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ —Å—Ç–æ–ª—ã
    await update.message.reply_photo(photo=img, caption="–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É: VIP, –ë–∞–ª–∫–æ–Ω, –¢–∞–Ω—Ü–ø–æ–ª, –ë–∞—Ä")
    return BOOK_CONFIRM


async def book_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    zone = update.message.text.strip()
    data = context.user_data
    text = (
        f"–í–∞—à–∞ –±—Ä–æ–Ω—å:\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n–ì–æ—Å—Ç–µ–π: {data['count']}\n–ó–æ–Ω–∞: {zone}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ? (–¥–∞/–Ω–µ—Ç)"
        if data["lang"] == "ru"
        else f"Your booking:\nDate: {data['date']}\nTime: {data['time']}\nGuests: {data['count']}\nZone: {zone}\n\nConfirm and prepay? (yes/no)"
    )
    await update.message.reply_text(text)
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–æ–Ω—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    context.user_data["zone"] = zone
    return BOOK_CONFIRM + 1  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ  BOOK_CONFIRM+1 == –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞


async def book_prepay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ans = update.message.text.lower()
    if ans not in ("–¥–∞", "yes"):
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ." if context.user_data["lang"] == "ru" else "Cancelled.")
        return MENU
    # 3.1.4 ‚Äî –≤—ã–¥–∞—á–∞ QR (–∑–∞–≥–ª—É—à–∫–∞)
    qr = BytesIO()
    img = Image.new("RGB", (200, 200), "white")
    d = ImageDraw.Draw(img)
    d.text((20, 90), "QR-CODE", fill="black")
    img.save(qr, "PNG")
    qr.seek(0)
    await update.message.reply_photo(photo=qr, caption="–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã" if context.user_data["lang"] == "ru" else "Scan to pay")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    summary = (
        f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å –æ—Ç {context.user_data['name']}:\n"
        f"{data['date']} {data['time']}, {data['count']} guests, zone {data['zone']}"
        if context.user_data["lang"] == "ru"
        else f"New booking by {context.user_data['name']}:\n"
             f"{data['date']} {data['time']}, {data['count']} guests, zone {data['zone']}"
    )
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=summary)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ë—Ä–æ–Ω—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞." if context.user_data["lang"] == "ru" else "Thank you! Booking confirmed.")
    return MENU


# 3.2 ‚Äî AI-–º–µ–Ω—é
async def ai_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    prompt = "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∏–∑–±–µ–≥–∞–µ—Ç–µ? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª." if context.user_data["lang"] == "ru" else "Any allergies or forbidden ingredients? If no ‚Äî type 'no'."
    await update.message.reply_text(prompt)
    return AI_ALLERGY


async def ai_allergy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["allergy"] = update.message.text.strip().lower()
    await update.message.reply_text("–§–æ—Ä–º–∏—Ä—É—é –º–µ–Ω—é‚Ä¶" if context.user_data["lang"] == "ru" else "Building menu‚Ä¶")
    # –¢—É—Ç –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    menu = ["–°–∞–ª–∞—Ç (–∑–µ–ª–µ–Ω—å)", "–ü–∏—Ü—Ü–∞ (—Å—ã—Ä, –º—É–∫–∞)", "–í–∏–Ω–æ (–≤–∏–Ω–æ–≥—Ä–∞–¥)"]
    filtered = [
        m for m in menu if context.user_data["allergy"] not in m.lower()
    ]
    out = "\n".join(filtered) or "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π."
    await update.message.reply_text(out)
    return MENU


# 3.3 ‚Äî –ó–∞–∫–∞–∑ –º—É–∑—ã–∫–∏
async def music_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: mp3, wav):"
    await update.message.reply_text(prompt)
    return MUSIC_TITLE


async def music_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    title = update.message.text.strip()
    context.user_data["track"] = title
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É‚Ä¶")
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    dj = "DJ Nox"  # –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    msg = f"–ó–∞–∫–∞–∑ –º—É–∑—ã–∫–∏: ¬´{title}¬ª –æ—Ç {context.user_data['name']} ‚Äî DJ: {dj}"
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    await update.message.reply_text("–¢—Ä–µ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –æ—á–µ—Ä–µ–¥—å." if context.user_data["lang"]=="ru" else "Track queued.")
    return MENU


# 3.4 ‚Äî –û—Ç–∑—ã–≤
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    kb = [["–ê–Ω–æ–Ω–∏–º–Ω–æ"], ["–° –∏–º–µ–Ω–µ–º"]]
    await update.message.reply_text("–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
    return FEEDBACK_CHOICE


async def feedback_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["anon"] = update.message.text.startswith("–ê–Ω–æ–Ω–∏–º")
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:")
    return FEEDBACK_TEXT


async def feedback_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    author = "–ê–Ω–æ–Ω–∏–º" if context.user_data["anon"] else context.user_data["name"]
    msg = f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {author}:\n{text}"
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!" if context.user_data["lang"]=="ru" else "Thanks for feedback!")
    return MENU


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∫–∏–¥–∞–µ—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π ConversationHandler
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    if "–±—Ä–æ–Ω–∏" in txt.lower() or "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" in txt.lower():
        return await book_start(update, context)
    if "ai" in txt.lower() or "–∞–ª–ª–µ—Ä–≥" in txt.lower():
        return await ai_start(update, context)
    if "–º—É–∑—ã" in txt.lower():
        return await music_start(update, context)
    if "–æ—Ç–∑—ã–≤" in txt.lower():
        return await feedback_start(update, context)
    if "–º–µ–Ω—é" in txt.lower():
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä
        await update.message.reply_text("–ù–∞—à–µ –º–µ–Ω—é:\n1) –°–∞–ª–∞—Ç\n2) –°—Ç–µ–π–∫\n3) –î–µ—Å–µ—Ä—Ç")
        return MENU
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.")
    return MENU


def draw_map(booked_seats: list) -> BytesIO:
    """
    –†–∏—Å—É–µ—Ç —Å—Ö–µ–º—É –∑–∞–ª–∞ 4√ó4 —Å—Ç–æ–ª–æ–≤, –∑–∞–∫—Ä–∞—à–∏–≤–∞—è –∫—Ä–∞—Å–Ω—ã–º –∑–∞–Ω—è—Ç—ã–µ, –∑–µ–ª—ë–Ω—ã–º —Å–≤–æ–±–æ–¥–Ω—ã–µ.
    """
    sz = 400
    img = Image.new("RGB", (sz, sz), "white")
    d = ImageDraw.Draw(img)
    n = 4
    cell = sz // n
    for i in range(n):
        for j in range(n):
            x0, y0 = j * cell + 5, i * cell + 5
            x1, y1 = x0 + cell - 10, y0 + cell - 10
            idx = i * n + j
            color = "red" if idx in booked_seats else "green"
            d.rectangle([x0, y0, x1, y1], fill=color)
            d.text((x0 + 10, y0 + 10), f"{idx+1}", fill="white")
    bio = BytesIO()
    img.save(bio, "PNG")
    bio.seek(0)
    return bio


def main() -> None:
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # registration
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(–†—É—Å—Å–∫–∏–π|English)$"), lang_chosen))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu), group=1)

    # ConversationHandler –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –º—ã —Ä—É–ª–∏–º —á–µ—Ä–µ–∑ main_menu
    # –ù–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏:
    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("ü™ë"), book_start)],
        states={
            BOOK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date)],
            BOOK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_time)],
            BOOK_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_count)],
            BOOK_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_confirm)],
            BOOK_CONFIRM + 1: [MessageHandler(filters.Regex("^(–¥–∞|yes|–Ω–µ—Ç|no)$"), book_prepay)],
        },
        fallbacks=[],
    )
    app.add_handler(conv)

    # AI
    app.add_handler(MessageHandler(filters.Regex("^(ü§ñ|AI)"), ai_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_allergy), group=2)

    # –ú—É–∑—ã–∫–∞
    app.add_handler(MessageHandler(filters.Regex("^(üéµ|–ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É)"), music_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, music_title), group=3)

    # –û—Ç–∑—ã–≤
    app.add_handler(MessageHandler(filters.Regex("^(‚úçÔ∏è|–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤)"), feedback_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_choice), group=4)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_text), group=5)

    # –ó–∞–ø—É—Å–∫
    app.run_polling()


if __name__ == "__main__":
    main()
