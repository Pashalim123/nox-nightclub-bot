import os
import logging
from datetime import datetime
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler,
    ContextTypes, filters
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    LANG, ASK_NAME,
    MENU, BOOK_DATE, BOOK_PEOPLE,
    BOOK_ZONE, BOOK_TABLE, BOOK_CONFIRM,
    AI_ALLERGY,
    MUSIC_NAME, MUSIC_CONFIRM,
    REVIEW_CHOICE, REVIEW_TEXT
) = range(13)

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
users = {}        # user_id ‚Üí {lang, name, allergy}
reservations = [] # —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
seats = {
    "VIP": ["VIP-1","VIP-2","VIP-3"],
    "–ë–∞–ª–∫–æ–Ω": ["–ë-1","–ë-2"],
    "–¢–∞–Ω—Ü–ø–æ–ª": ["–¢-1","–¢-2","–¢-3"],
    "–ë–∞—Ä": ["–ë–∞—Ä-1"]
}
dishes = [
    {"name":"–ë—É—Ä–≥–µ—Ä","ingredients":["–º—è—Å–æ","—Å—ã—Ä"]},
    {"name":"–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å","ingredients":["–º–∞–π–æ–Ω–µ–∑","—Å—ã—Ä","–∫—É—Ä–∏—Ü–∞"]},
    {"name":"–ú–æ—Ö–∏—Ç–æ","ingredients":["–º—è—Ç–∞","–ª–∞–π–º"]},
    {"name":"–ü–∞—Å—Ç–∞","ingredients":["–ø–∞—Å—Ç–∞","—Å—ã—Ä"]}
]
dj_schedule = {
    0:"DJ Alpha",1:"DJ Beta",2:"DJ Gamma",
    3:"DJ Delta",4:"DJ Epsilon",5:"DJ Zeta",6:"DJ Eta"
}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
texts = {
  "ru": {
    "select_lang":"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    "ask_name":"–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
    "main_menu":"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    "menu":"üìã –ú–µ–Ω—é:\n- "+"\n- ".join(d["name"] for d in dishes),
    "review":"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
    "ask_allergy":"–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏—é (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
    "ai_menu":"üçΩÔ∏è –ú–µ–Ω—é (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ):\n",
    "ask_date":"üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM):",
    "ask_people":"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π?",
    "ask_zone":"ü™ë –í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É:",
    "ask_table":"üìç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫ –≤ –∑–æ–Ω–µ {zone}:",
    "confirm_booking":"‚úÖ –ë—Ä–æ–Ω—å: –∑–æ–Ω–∞ {zone}, —Å—Ç–æ–ª–∏–∫ {table}, –≤—Ä–µ–º—è {datetime}, –≥–æ—Å—Ç–µ–π {people}.\n–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 1000 —Å–æ–º.",
    "cancel":"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.",
    "music_warn":"‚ö†Ô∏è –ñ–∞–Ω—Ä—ã: House, Pop, RnB, Techno",
    "music_prompt":"üéµ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞:",
    "music_confirm":"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ '{track}' –∑–∞ 1000 —Å–æ–º? (–¥–∞/–Ω–µ—Ç)",
    "thank_you":"–°–ø–∞—Å–∏–±–æ! –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª—ë–Ω.",
    "review_thanks":"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!"
  },
  "en": {
    "select_lang":"Select language:",
    "ask_name":"How shall I call you?",
    "main_menu":"Main menu:",
    "menu":"üìã Menu:\n- "+"\n- ".join(d["name"] for d in dishes),
    "review":"‚úçÔ∏è Please write your review:",
    "ask_allergy":"List allergies (comma-separated):",
    "ai_menu":"üçΩÔ∏è Menu (filtered):\n",
    "ask_date":"üóì Date & time (YYYY-MM-DD HH:MM):",
    "ask_people":"üë• Number of guests?",
    "ask_zone":"ü™ë Select zone:",
    "ask_table":"üìç Select table in {zone}:",
    "confirm_booking":"‚úÖ Booking: zone {zone}, table {table}, time {datetime}, guests {people}.\nPrepay 1000 som.",
    "cancel":"‚ùå Cancelled.",
    "music_warn":"‚ö†Ô∏è Genres: House, Pop, RnB, Techno",
    "music_prompt":"üéµ Track name:",
    "music_confirm":"Confirm order '{track}' for 1000 som? (yes/no)",
    "thank_you":"Thank you! Admin notified.",
    "review_thanks":"Thank you for your feedback!"
  }
}

def t(user_id, key):
    lang = users.get(user_id,{}).get("lang","ru")
    return texts[lang][key]

# /start ‚Üí –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    users[uid]={}
    kb = [["–†—É—Å—Å–∫–∏–π","English"]]
    await update.message.reply_text(texts["ru"]["select_lang"],
        reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True,one_time_keyboard=True))
    return LANG

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ ‚Üí —Å–ø—Ä–æ—Å–∏—Ç—å –∏–º—è
async def set_lang(update, ctx):
    uid=update.effective_user.id
    choice=update.message.text
    users[uid]["lang"]="ru" if choice.startswith("–†—É—Å") else "en"
    await update.message.reply_text(t(uid,"ask_name"))
    return ASK_NAME

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
async def set_name(update, ctx):
    uid=update.effective_user.id
    users[uid]["name"]=update.message.text
    # –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    lang=users[uid]["lang"]
    kb = [
      ["ü™ë –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" if lang=="ru" else "Book table","üìã –ú–µ–Ω—é" if lang=="ru" else "Menu"],
      ["ü§ñ AI-–º–µ–Ω—é","üéµ –ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É"],["‚úçÔ∏è –û—Ç–∑—ã–≤"]
    ]
    await update.message.reply_text(t(uid,"main_menu"),
        reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
    return MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é
async def menu_choice(update, ctx):
    uid=update.effective_user.id
    txt=update.message.text
    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if "ü™ë" in txt or "Book" in txt:
        await update.message.reply_text(t(uid,"ask_date"))
        return BOOK_DATE
    # –ú–µ–Ω—é
    if "üìã" in txt or txt=="Menu":
        await update.message.reply_text(t(uid,"menu"))
        return MENU
    # AI-–º–µ–Ω—é
    if "AI" in txt:
        await update.message.reply_text(t(uid,"ask_allergy"))
        return AI_ALLERGY
    # –ú—É–∑—ã–∫–∞
    if "üéµ" in txt or "Track" in txt:
        await update.message.reply_text(t(uid,"music_warn"))
        await update.message.reply_text(t(uid,"music_prompt"))
        return MUSIC_NAME
    # –û—Ç–∑—ã–≤
    if "‚úçÔ∏è" in txt or "Review" in txt:
        kb=[["–ê–Ω–æ–Ω–∏–º–Ω–æ","–° –∏–º–µ–Ω–µ–º"]]
        await update.message.reply_text(t(uid,"review"),
            reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True,one_time_keyboard=True))
        return REVIEW_CHOICE
    return MENU

# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥–∞—Ç–∞ ‚Üí –≥–æ—Å—Ç–∏ ‚Üí –∑–æ–Ω–∞ ‚Üí —Å—Ç–æ–ª ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def book_date(update, ctx):
    uid=update.effective_user.id
    txt=update.message.text
    try:
        datetime.strptime(txt,"%Y-%m-%d %H:%M")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
        return BOOK_DATE
    ctx.user_data["datetime"]=txt
    await update.message.reply_text(t(uid,"ask_people"))
    return BOOK_PEOPLE

async def book_people(update, ctx):
    uid=update.effective_user.id
    ctx.user_data["people"]=update.message.text
    # –∑–æ–Ω—ã
    kb=[[z] for z in seats]
    await update.message.reply_text(t(uid,"ask_zone"),
        reply_markup=ReplyKeyboardMarkup(kb,one_time_keyboard=True,resize_keyboard=True))
    return BOOK_ZONE

async def book_zone(update, ctx):
    uid=update.effective_user.id
    zone=update.message.text
    ctx.user_data["zone"]=zone
    # —Å—Ç–æ–ª–∏–∫–∏ inline
    buttons=[]
    for tbl in seats[zone]:
        taken=any(r["table"]==tbl for r in reservations)
        emoji="üî¥" if taken else "üü¢"
        buttons.append(InlineKeyboardButton(f"{tbl} {emoji}",callback_data=f"tbl|{tbl}"))
    kb=[buttons[i:i+2] for i in range(0,len(buttons),2)]
    await update.message.reply_text(t(uid,"ask_table").format(zone=zone),
        reply_markup=InlineKeyboardMarkup(kb))
    return BOOK_TABLE

async def book_table_cb(update, ctx):
    await update.callback_query.answer()
    uid=update.callback_query.from_user.id
    _,tbl=update.callback_query.data.split("|")
    ctx.user_data["table"]=tbl
    await update.callback_query.edit_message_text(t(uid,"confirm_booking").format(**ctx.user_data))
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
    
    data=ctx.user_data; data["name"]=users[uid]["name"]
    reservations.append(data.copy())
    await ctx.bot.send_message(
        chat_id=os.getenv("-1002705399393"),
        text=f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {data}"
    )
    return ConversationHandler.END
# –ü—Ä–∏–º–µ—Ä –¥–ª—è –±—Ä–æ–Ω–∏ (–≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ confirm_booking)
# –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ confirm_text:
confirm_text = texts[lang]["confirm_booking"].format(**ctx.user_data)
# –î–æ–±–∞–≤–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–º—è –≥–æ—Å—Ç—è
from datetime import datetime
timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
guest = users[uid]["name"]
group_msg = (
    f"üÜï <b>–ù–æ–≤–∞—è –±—Ä–æ–Ω—å</b>\n"
    f"–ì–æ—Å—Ç—å: {guest}\n"
    f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {timestamp}\n"
    f"–ó–∞–ª: {ctx.user_data['zone']}\n"
    f"–°—Ç–æ–ª–∏–∫: {ctx.user_data['table']}\n"
    f"–í—Ä–µ–º—è –±—Ä–æ–Ω–∏: {ctx.user_data['datetime']}\n"
    f"–ì–æ—Å—Ç–µ–π: {ctx.user_data['people']}\n"
    f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 1000 —Å–æ–º"
)
await context.bot.send_message(
    chat_id=os.getenv(""),
    text=group_msg,
    parse_mode="HTML"
)


# AI-–º–µ–Ω—é
async def ai_allergy(update, ctx):
    uid=update.effective_user.id
    allergy=[i.strip().lower() for i in update.message.text.split(",")]
    users[uid]["allergy"]=allergy
    allowed=[d["name"] for d in dishes if not(set(d["ingredients"])&set(allergy))]
    await update.message.reply_text(texts[users[uid]["lang"]]["ai_menu"] + "\n".join(allowed))
    return ConversationHandler.END

# –ú—É–∑—ã–∫–∞
async def music_name(update, ctx):
    uid=update.effective_user.id
    ctx.user_data["track"]=update.message.text
    await update.message.reply_text(t(uid,"music_confirm").format(track=ctx.user_data["track"]))
    return MUSIC_CONFIRM

async def music_confirm(update, ctx):
    uid=update.effective_user.id; txt=update.message.text.lower()
    if txt in ["–¥–∞","yes"]:
        track=ctx.user_data["track"]
        dj=dj_schedule[datetime.now().weekday()]
        await update.message.reply_text(t(uid,"thank_you"))
        await ctx.bot.send_message(
            chat_id=os.getenv("GROUP_CHAT_ID"),
            text=f"–ó–∞–∫–∞–∑ –º—É–∑—ã–∫–∏: {track}, DJ: {dj}"
        )
    else:
        await update.message.reply_text(t(uid,"cancel"))
    return ConversationHandler.END

# –û—Ç–∑—ã–≤
async def review_choice(update, ctx):
    ctx.user_data["anon"] = (update.message.text == "–ê–Ω–æ–Ω–∏–º–Ω–æ")
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤:")
    return REVIEW_TEXT

async def review_text(update, ctx):
    uid=update.effective_user.id
    text=update.message.text
    name = users[uid]["name"] if not ctx.user_data.get("anon") else "–ê–Ω–æ–Ω–∏–º"
    await update.message.reply_text(t(uid,"review_thanks"))
    await ctx.bot.send_message(
        chat_id=os.getenv("-1002705399393"),
        text=f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {name}:\n{text}"
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update, ctx):
    uid=update.effective_user.id
    await update.message.reply_text(t(uid,"cancel"))
    return ConversationHandler.END

def main():
    token=os.getenv("8003288203:AAHWtHosG1kKRf0yd123i4yVn0Vx7GMakBA")
    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANG:    [MessageHandler(filters.TEXT, set_lang)],
            ASK_NAME:[MessageHandler(filters.TEXT, set_name)],
            MENU:    [MessageHandler(filters.TEXT, menu_choice)],
            BOOK_DATE:  [MessageHandler(filters.TEXT, book_date)],
            BOOK_PEOPLE:[MessageHandler(filters.TEXT, book_people)],
            BOOK_ZONE:  [MessageHandler(filters.TEXT, book_zone)],
            BOOK_TABLE: [CallbackQueryHandler(book_table_cb)],
            AI_ALLERGY:[MessageHandler(filters.TEXT, ai_allergy)],
            MUSIC_NAME:[MessageHandler(filters.TEXT, music_name)],
            MUSIC_CONFIRM:[MessageHandler(filters.TEXT, music_confirm)],
            REVIEW_CHOICE:[MessageHandler(filters.TEXT, review_choice)],
            REVIEW_TEXT:[MessageHandler(filters.TEXT, review_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
