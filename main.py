# main.py

import os
import logging
from datetime import datetime

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from draw_map import draw_map

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ====
(
    LANG, ASK_NAME, MENU,
    BOOK_DATE, BOOK_TIME, BOOK_COUNT, BOOK_TABLE, BOOK_CONFIRM,
    AI_ALLERGY, AI_MENU,
    MUSIC_REQUEST, MUSIC_CONFIRM,
    REVIEW_CHOOSE, REVIEW_TEXT,
) = range(14)

# –°—Ö–µ–º–∞ –∑–∞–ª–∞ ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (–ø—Ä–∏–º–µ—Ä)
SEAT_COORDS = {
    1: (100, 200),
    2: (100, 350),
    3: (100, 500),
    4: (400, 350),
}

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
# –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã/—Ç—Ä–µ–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
PAYMENT_LINK = "https://example.com/pay?amount="

# ==== /start ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    kb = [["–†—É—Å—Å–∫–∏–π", "English"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", 
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return LANG

async def choose_lang(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = update.message.text.lower()
    context.user_data["lang"] = "ru" if "—Ä—É—Å" in lang else "en"
    await update.message.reply_text(
        {"ru": "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", "en": "What is your name?"}[context.user_data["lang"]],
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    context.user_data["name"] = name
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = [
        ["ü™ë –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", "üìÖ AI-–º–µ–Ω—é"],
        ["üéµ –ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É", "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
    ]
    await update.message.reply_text(
        f"{name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º?",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )
    return MENU

# ==== –ú–ï–ù–Æ ====
async def menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if "–∑–∞–±—Ä–æ–Ω–∏—Ä" in text.lower():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏ (YYYY-MM-DD):")
        return BOOK_DATE
    if "ai" in text.lower() or "–º–µ–Ω—é" in text.lower():
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `–Ω–µ—Ç`.")
        return AI_ALLERGY
    if "–º—É–∑—ã–∫" in text.lower():
        await update.message.reply_text("–ö–∞–∫–æ–π —Ç—Ä–µ–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å? (House/Pop/RnB/Techno)")
        return MUSIC_REQUEST
    if "–æ—Ç–∑—ã–≤" in text.lower():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        return REVIEW_TEXT
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.")
    return MENU

# ==== –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ====
async def book_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):")
    return BOOK_TIME

async def book_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["time"] = update.message.text.strip()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?")
    return BOOK_COUNT

async def book_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["count"] = update.message.text.strip()
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 4 —Å—Ç–æ–ª–∞
    kb = [[KeyboardButton(f"–°—Ç–æ–ª {i}")] for i in SEAT_COORDS.keys()]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
    return BOOK_TABLE

async def book_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞
    table = int(update.message.text.replace("–°—Ç–æ–ª ", ""))
    context.user_data["table"] = table
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    d = context.user_data["date"]
    t = context.user_data["time"]
    c = context.user_data["count"]
    tb = context.user_data["table"]
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–î–∞—Ç–∞: {d}\n–í—Ä–µ–º—è: {t}\n–ì–æ—Å—Ç–µ–π: {c}\n–°—Ç–æ–ª: {tb}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)",
        reply_markup=ReplyKeyboardMarkup([["–¥–∞","–Ω–µ—Ç"]], resize_keyboard=True)
    )
    return BOOK_CONFIRM

async def book_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ans = update.message.text.lower()
    if ans != "–¥–∞":
        await update.message.reply_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å: –∑–∞–Ω—è—Ç–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è—Ç.
    reservations = {i: (i == context.user_data["table"]) for i in SEAT_COORDS}
    map_file = draw_map(reservations, base_path="hall_base.png", out_path="hall_map.png")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Å—Ç—é
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(map_file, "rb"),
        caption="–°—Ö–µ–º–∞ –∑–∞–ª–∞: üî¥ –∑–∞–Ω—è—Ç–æ, üü¢ —Å–≤–æ–±–æ–¥–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    ts = datetime.now().strftime("%Y-%m-%d %H:%M")
    msg = (
        f"ü™ë <b>–ù–æ–≤–∞—è –±—Ä–æ–Ω—å</b>\n"
        f"–ì–æ—Å—Ç—å: {context.user_data['name']}\n"
        f"–î–∞—Ç–∞/–í—Ä–µ–º—è: {context.user_data['date']} {context.user_data['time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {context.user_data['count']}\n"
        f"–°—Ç–æ–ª: {context.user_data['table']}\n"
        f"–í—Ä–µ–º—è: {ts}"
    )
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=msg,
        parse_mode="HTML"
    )

    await update.message.reply_text("–í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
    return ConversationHandler.END

# ==== AI-–ú–ï–ù–Æ ====
async def ai_allergy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["allergy"] = update.message.text.strip().lower()
    # –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞–µ–º –º–µ–Ω—é
    menu_text = (
        "–ù–∞—à–µ –º–µ–Ω—é:\n"
        "- –ö–µ—Å–∞–¥–∏–ª—å—è —Å –∫—É—Ä–∏—Ü–µ–π\n"
        "- –ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞\n"
        "- –°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å\n"
        # ...
    )
    await update.message.reply_text(menu_text, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ==== –ó–ê–ö–ê–ó –ú–£–ó–´–ö–ò ====
async def music_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["track"] = update.message.text.strip()
    await update.message.reply_text(
        f"–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ: {context.user_data['track']}\n"
        "–°—É–º–º–∞ 1000 KGS. –û–ø–ª–∞—Ç–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)"
    )
    return MUSIC_CONFIRM

async def music_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.lower() == "–¥–∞":
        link = PAYMENT_LINK + "1000"
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {link}")
        # –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–≤—Ä—É—á–Ω—É—é) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É, –Ω–æ —É –Ω–∞—Å –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ä–∞–∑—É:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üéµ –ó–∞–∫–∞–∑ –º—É–∑—ã–∫–∏: {context.user_data['track']} –æ—Ç {context.user_data['name']}"
        )
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω.")
    else:
        await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# ==== –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í ====
async def review_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    review = update.message.text.strip()
    anon = False
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=(
            f"‚úçÔ∏è –û—Ç–∑—ã–≤\n"
            f"{'(–∞–Ω–æ–Ω–∏–º)' if anon else context.user_data['name']}: {review}"
        )
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ==== –û–¢–ú–ï–ù–ê ====
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ==== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ====
def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_lang)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_choice)],

            BOOK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date)],
            BOOK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_time)],
            BOOK_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_count)],
            BOOK_TABLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, book_table)],
            BOOK_CONFIRM: [MessageHandler(filters.Regex("^(–¥–∞|–Ω–µ—Ç)$"), book_confirm)],

            AI_ALLERGY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ai_allergy)],

            MUSIC_REQUEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, music_request)],
            MUSIC_CONFIRM: [MessageHandler(filters.Regex("^(–¥–∞|–Ω–µ—Ç)$"), music_confirm)],

            REVIEW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, review_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
