import os
import logging
import requests
from datetime import datetime

from PIL import Image, ImageDraw               # Pillow –≤–º–µ—Å—Ç–æ PIL
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format="%(asctime)s ‚Äî %(name)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —á—Ç–µ–Ω–∏–µ –∏–∑ .env ===
TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))

# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling —É–¥–∞–ª—è–µ–º –ª—é–±–æ–π webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
if TOKEN:
    requests.get(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook?drop_pending_updates=true")

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ===
(
    LANG, NAME, MENU,
    BOOK_DATE, BOOK_TIME, BOOK_GUESTS, BOOK_ZONE, BOOK_CONFIRM,
    AI_ALLERGY,
    MUSIC_TITLE, MUSIC_CONFIRM,
    REVIEW_TEXT, REVIEW_ANON,
) = range(13)

# === –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ö–µ–º—ã –∑–∞–ª–∞ ===
def draw_map():
    """
    –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç—É –∑–∞–ª–∞ 400√ó300 —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∑–æ–Ω.
    üî¥ / üü¢ –±—É–¥–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ—Ç–æ–º –ø–æ–≤–µ—Ä—Ö, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç —Å—Ç–∞—Ç—É—Å.
    """
    img = Image.new("RGB", (400, 300), "white")
    d = ImageDraw.Draw(img)
    # –†–∏—Å—É–µ–º 4 –∑–æ–Ω—ã –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ
    d.rectangle([( 20,  20), (180, 140)], outline="black")
    d.text(( 30,  30), "VIP", fill="black")
    d.rectangle([(220,  20), (380, 140)], outline="black")
    d.text((230,  30), "BAR", fill="black")
    d.rectangle([( 20, 160), (180, 280)], outline="black")
    d.text(( 30, 170), "–ë–∞–ª–∫–æ–Ω", fill="black")
    d.rectangle([(220, 160), (380, 280)], outline="black")
    d.text((230, 170), "–¢–∞–Ω—Ü–ø–æ–ª", fill="black")
    return img

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["–†—É—Å—Å–∫–∏–π", "English"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return LANG

async def lang_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    context.user_data["lang"] = "ru" if "–†—É—Å" in txt else "en"
    prompt = "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" if context.user_data["lang"]=="ru" else "How can I call you?"
    await update.message.reply_text(prompt, reply_markup=ReplyKeyboardMarkup([], remove_keyboard=True))
    return NAME

async def name_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    name = context.user_data["name"]
    lang = context.user_data["lang"]
    greet = f"–ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NOX." if lang=="ru" else f"Hello, {name}! Welcome to NOX."
    menu = [
        ["ü™ë –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", "üìÖ AI-–º–µ–Ω—é"],
        ["üéµ –ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É", "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
    ]
    await update.message.reply_text(
        greet,
        reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True)
    )
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    lang = context.user_data["lang"]
    if text.startswith("ü™ë"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (YYYY-MM-DD):")
        return BOOK_DATE
    if text.startswith("üìÖ"):
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        )
        return AI_ALLERGY
    if text.startswith("üéµ"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:")
        return MUSIC_TITLE
    if text.startswith("‚úçÔ∏è"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        return REVIEW_TEXT
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.")
    return MENU

# ‚Äî –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî
async def book_date(update, context) -> int:
    context.user_data["book_date"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):")
    return BOOK_TIME

async def book_time(update, context) -> int:
    context.user_data["book_time"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?")
    return BOOK_GUESTS

async def book_guests(update, context) -> int:
    context.user_data["book_guests"] = update.message.text
    # –ø—Ä–∏—Å—ã–ª–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–ª–∞
    img = draw_map()
    with open("hall_map.png","wb") as f:
        img.save(f, format="PNG")
    await update.message.reply_photo(photo=open("hall_map.png","rb"), caption="–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É: VIP, BAR, –ë–∞–ª–∫–æ–Ω, –¢–∞–Ω—Ü–ø–æ–ª")
    return BOOK_ZONE

async def book_zone(update, context) -> int:
    context.user_data["book_zone"] = update.message.text
    d = context.user_data
    info = (
        f"–î–∞—Ç–∞: {d['book_date']}\n"
        f"–í—Ä–µ–º—è: {d['book_time']}\n"
        f"–ì–æ—Å—Ç–µ–π: {d['book_guests']}\n"
        f"–ó–æ–Ω–∞: {d['book_zone']}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å 1000 —Å–æ–º?"
    )
    kb = [["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(info, reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
    return BOOK_CONFIRM

async def book_confirm(update, context) -> int:
    if update.message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <QR-CODE-LINK>")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
        d = context.user_data
        msg = (
            f"üìå *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å*\n"
            f"üë§ {d['name']}\n"
            f"üìÖ {d['book_date']} {d['book_time']}\n"
            f"üë• {d['book_guests']} —á–µ–ª.\n"
            f"üè∑ {d['book_zone']}\n"
        )
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg, parse_mode="Markdown")
    else:
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return MENU

# ‚Äî AI-–º–µ–Ω—é ‚Äî
async def ai_allergy(update, context) -> int:
    alle = [x.strip().lower() for x in update.message.text.split(",")]
    context.user_data["allergies"] = alle
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ë–î
    full_menu = ["–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞", "–ë—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π"]
    ok = [item for item in full_menu if not any(a in item.lower() for a in alle)]
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª—é–¥–∞:\n" + "\n".join(ok))
    return MENU

# ‚Äî –ú—É–∑—ã–∫–∞ ‚Äî
async def music_title(update, context) -> int:
    context.user_data["music_title"] = update.message.text
    await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ —Ç—Ä–µ–∫–∞ –∏ –æ–ø–ª–∞—Ç—É 1000 —Å–æ–º:", reply_markup=ReplyKeyboardMarkup([["OK","–û—Ç–º–µ–Ω–∏—Ç—å"]], one_time_keyboard=True))
    return MUSIC_CONFIRM

async def music_confirm(update, context) -> int:
    if update.message.text == "OK":
        title = context.user_data["music_title"]
        await update.message.reply_text("–¢—Ä–µ–∫ –∑–∞–∫–∞–∑–∞–Ω, —Å–ø–∞—Å–∏–±–æ!")
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        msg = f"üéµ *–ó–∞–∫–∞–∑ –º—É–∑—ã–∫–∏*\n‚ñ∂Ô∏è {title}\nüë§ {context.user_data['name']}\n‚è∞ {now}"
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg, parse_mode="Markdown")
    else:
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return MENU

# ‚Äî –û—Ç–∑—ã–≤—ã ‚Äî
async def review_text(update, context) -> int:
    context.user_data["review_text"] = update.message.text
    kb = [["–ê–Ω–æ–Ω–∏–º–Ω–æ","–° –∏–º–µ–Ω–µ–º"]]
    await update.message.reply_text("–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
    return REVIEW_ANON

async def review_anon(update, context) -> int:
    choice = update.message.text
    text = context.user_data["review_text"]
    if choice == "–° –∏–º–µ–Ω–µ–º":
        text = f"{context.user_data['name']}: {text}"
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text="üí¨ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*\n" + text, parse_mode="Markdown")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    return MENU

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
    def main():
    # --- –¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ main() –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –æ—Ç—Å—Ç—É–ø–æ–º ---
    application = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    # ‚Ä¶ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Ä¶

    return application  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANG:           [MessageHandler(filters.TEXT & ~filters.COMMAND, lang_chosen)],
            NAME:           [MessageHandler(filters.TEXT & ~filters.COMMAND, name_chosen)],
            MENU:           [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
            BOOK_DATE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, book_date)],
            BOOK_TIME:      [MessageHandler(filters.TEXT & ~filters.COMMAND, book_time)],
            BOOK_GUESTS:    [MessageHandler(filters.TEXT & ~filters.COMMAND, book_guests)],
            BOOK_ZONE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, book_zone)],
            BOOK_CONFIRM:   [MessageHandler(filters.TEXT & ~filters.COMMAND, book_confirm)],
            AI_ALLERGY:     [MessageHandler(filters.TEXT & ~filters.COMMAND, ai_allergy)],
            MUSIC_TITLE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, music_title)],
            MUSIC_CONFIRM:  [MessageHandler(filters.TEXT & ~filters.COMMAND, music_confirm)],
            REVIEW_TEXT:    [MessageHandler(filters.TEXT & ~filters.COMMAND, review_text)],
            REVIEW_ANON:    [MessageHandler(filters.TEXT & ~filters.COMMAND, review_anon)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv)
    
    # <-- –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤—Å–µ –≤–∞—à–∏ CommandHandler, CallbackQueryHandler –∏ —Ç.–¥.
    return application

 if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à Application
    application = main()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤)
    application.bot.delete_webhook()

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    # drop_pending_updates=True —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ ¬´–∑–∞–≤–∏—Å—à–∏–µ¬ª –∞–ø–¥–µ–π—Ç—ã,
    # —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    application.run_polling(drop_pending_updates=True)
