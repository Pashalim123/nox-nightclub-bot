# main.py
import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# --- –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN   = os.getenv("BOT_TOKEN")           # —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Render ‚Üí Environment Variables
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))  # –≤–∏–¥–µ–Ω –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤—ã—à–µ

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
LANG, ASK_NAME, MAIN_MENU, MUSIC_TRACK, MUSIC_CONFIRM = range(5)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞."""
    kb = [["–†—É—Å—Å–∫–∏–π"], ["English"]]
    markup = ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)
    return LANG

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è."""
    text = update.message.text.lower()
    context.user_data["lang"] = "ru" if text.startswith("—Ä") or text.startswith("r") else "en"
    prompt = "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" if context.user_data["lang"]=="ru" else "What is your name?"
    await update.message.reply_text(prompt)
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    name = update.message.text.strip()
    context.user_data["name"] = name

    if context.user_data["lang"] == "ru":
        kb = [["–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"], ["AI-–ú–µ–Ω—é"], ["–ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É"], ["–û—Ç–∑—ã–≤"]]
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NOX Nightclub!"
    else:
        kb = [["Booking"], ["AI-Menu"], ["Music Order"], ["Feedback"]]
        greeting = f"Hello, {name}! Welcome to NOX Nightclub!"

    markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    await update.message.reply_text(greeting, reply_markup=markup)
    return MAIN_MENU

async def order_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 1: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –≥–æ—Å—Ç—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞."""
    prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞:" if context.user_data["lang"]=="ru" else "Enter track name:"
    await update.message.reply_text(prompt)
    return MUSIC_TRACK

async def music_track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 2: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    context.user_data["track"] = update.message.text.strip()
    prompt = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ —Ç—Ä–µ–∫–∞? (–¥–∞/–Ω–µ—Ç)" if context.user_data["lang"]=="ru" else "Confirm track order? (yes/no)"
    await update.message.reply_text(prompt)
    return MUSIC_CONFIRM

async def music_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 3: –ø–æ ¬´–¥–∞¬ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ ¬´–Ω–µ—Ç¬ª ‚Äì –æ—Ç–º–µ–Ω—è–µ–º."""
    ans = update.message.text.strip().lower()
    if ans in ("–¥–∞", "yes"):
        name  = context.user_data["name"]
        track = context.user_data["track"]
        dj    = "DJ Example"  # –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
        ts    = datetime.now().strftime("%Y-%m-%d %H:%M")
        group_msg = (
            f"üéµ <b>–ó–∞–∫–∞–∑ –º—É–∑—ã–∫–∏</b>\n"
            f"–ì–æ—Å—Ç—å: {name}\n"
            f"–¢—Ä–µ–∫: {track}\n"
            f"DJ: {dj}\n"
            f"–í—Ä–µ–º—è: {ts}"
        )
        # <-- –≤–æ—Ç –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram-–≥—Ä—É–ø–ø—É
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=group_msg,
            parse_mode="HTML"
        )
        resp = "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!" if context.user_data["lang"]=="ru" else "Your order is confirmed!"
    else:
        resp = "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω." if context.user_data["lang"]=="ru" else "Order cancelled."
    await update.message.reply_text(resp)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π handler –¥–ª—è /cancel."""
    text = "–û—Ç–º–µ–Ω–µ–Ω–æ." if context.user_data.get("lang")=="ru" else "Cancelled."
    await update.message.reply_text(text)
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–æ–Ω–Ω—ã–π handler –¥–ª—è /start ‚Üí –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ‚Üí –∏–º—è ‚Üí –º–µ–Ω—é ‚Üí –º—É–∑—ã–∫–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANG:          [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            ASK_NAME:      [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            MAIN_MENU:     [
                MessageHandler(filters.Regex("–ó–∞–∫–∞–∑–∞—Ç—å –º—É–∑—ã–∫—É|Music Order"), order_music),
                # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
            ],
            MUSIC_TRACK:   [MessageHandler(filters.TEXT & ~filters.COMMAND, music_track)],
            MUSIC_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, music_confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç chat_id –ª—é–±–æ–≥–æ —á–∞—Ç–∞
    async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(f"Chat ID = {update.effective_chat.id}")

    app.add_handler(conv)
    app.add_handler(CommandHandler("id", get_id))

    app.run_polling()

if __name__ == "__main__":
    main()
